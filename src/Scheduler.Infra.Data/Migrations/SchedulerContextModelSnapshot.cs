// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scheduler.Infra.Data.Context;

#nullable disable

namespace Scheduler.Infra.Data.Migrations
{
    [DbContext(typeof(SchedulerContext))]
    partial class SchedulerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Scheduler.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3071fb3-aafc-4f06-9107-b29281354266"),
                            ClientId = new Guid("5748500f-98f9-460b-8aaf-a39591065aec"),
                            CreatedDate = new DateTime(2023, 9, 27, 9, 23, 2, 407, DateTimeKind.Local).AddTicks(6999),
                            IsDeleted = false,
                            ScheduledDate = new DateTime(2023, 9, 29, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a5a8621f-0930-4199-b0a8-e43ca5d89b74"),
                            ClientId = new Guid("5748500f-98f9-460b-8aaf-a39591065aec"),
                            CreatedDate = new DateTime(2023, 9, 27, 9, 23, 2, 407, DateTimeKind.Local).AddTicks(7202),
                            IsDeleted = false,
                            ScheduledDate = new DateTime(2023, 10, 15, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4e7fe69c-7e2e-4fb8-bc1a-4fe91b38d597"),
                            ClientId = new Guid("5748500f-98f9-460b-8aaf-a39591065aec"),
                            CreatedDate = new DateTime(2023, 9, 27, 9, 23, 2, 407, DateTimeKind.Local).AddTicks(7217),
                            IsDeleted = false,
                            ScheduledDate = new DateTime(2023, 10, 30, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Scheduler.Domain.Entities.AppointmentService", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentService");

                    b.HasData(
                        new
                        {
                            AppointmentId = new Guid("f3071fb3-aafc-4f06-9107-b29281354266"),
                            ServiceId = new Guid("820d24da-2abf-4661-97a8-529ce54cc378")
                        },
                        new
                        {
                            AppointmentId = new Guid("f3071fb3-aafc-4f06-9107-b29281354266"),
                            ServiceId = new Guid("8f36d07c-b67c-4623-a5b3-a03eb9da6812")
                        },
                        new
                        {
                            AppointmentId = new Guid("a5a8621f-0930-4199-b0a8-e43ca5d89b74"),
                            ServiceId = new Guid("820d24da-2abf-4661-97a8-529ce54cc378")
                        },
                        new
                        {
                            AppointmentId = new Guid("a5a8621f-0930-4199-b0a8-e43ca5d89b74"),
                            ServiceId = new Guid("8f36d07c-b67c-4623-a5b3-a03eb9da6812")
                        },
                        new
                        {
                            AppointmentId = new Guid("4e7fe69c-7e2e-4fb8-bc1a-4fe91b38d597"),
                            ServiceId = new Guid("18991fb6-827d-4a07-8a8c-33cc7f38dba4")
                        },
                        new
                        {
                            AppointmentId = new Guid("4e7fe69c-7e2e-4fb8-bc1a-4fe91b38d597"),
                            ServiceId = new Guid("8f36d07c-b67c-4623-a5b3-a03eb9da6812")
                        });
                });

            modelBuilder.Entity("Scheduler.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5748500f-98f9-460b-8aaf-a39591065aec"),
                            CreatedDate = new DateTime(2023, 9, 27, 9, 23, 2, 407, DateTimeKind.Local).AddTicks(6818),
                            Email = "email@email.com",
                            IsDeleted = false,
                            Name = "João da Silva"
                        });
                });

            modelBuilder.Entity("Scheduler.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("820d24da-2abf-4661-97a8-529ce54cc378"),
                            CreatedDate = new DateTime(2023, 9, 27, 9, 23, 2, 407, DateTimeKind.Local).AddTicks(7299),
                            IsDeleted = false,
                            Name = "Corte"
                        },
                        new
                        {
                            Id = new Guid("8f36d07c-b67c-4623-a5b3-a03eb9da6812"),
                            CreatedDate = new DateTime(2023, 9, 27, 9, 23, 2, 407, DateTimeKind.Local).AddTicks(7316),
                            IsDeleted = false,
                            Name = "Barba"
                        },
                        new
                        {
                            Id = new Guid("18991fb6-827d-4a07-8a8c-33cc7f38dba4"),
                            CreatedDate = new DateTime(2023, 9, 27, 9, 23, 2, 407, DateTimeKind.Local).AddTicks(7325),
                            IsDeleted = false,
                            Name = "Luzes"
                        });
                });

            modelBuilder.Entity("Scheduler.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Scheduler.Domain.Entities.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Scheduler.Domain.Entities.AppointmentService", b =>
                {
                    b.HasOne("Scheduler.Domain.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Scheduler.Domain.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Scheduler.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Scheduler.Domain.Entities.Client", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Scheduler.Domain.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });
#pragma warning restore 612, 618
        }
    }
}
